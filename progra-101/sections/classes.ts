// 游늷 Programaci칩n Orientada a Objetos (POO)
// La POO nos permite representar cosas de la vida real mediante clases y objetos.
// Una clase es como un molde o plantilla, mientras que un objeto es la instancia real de esa clase.

// 游댳 Interfaces y Clases
// - Una interfaz define c칩mo debe "lucir" un objeto (sus propiedades y tipos).
// - Una clase, en cambio, puede usarse para crear instancias reales con valores y comportamientos.
// - IMPORTANTE: las interfaces NO generan objetos, solo sirven como contrato o gu칤a de estructura.
// - Las clases S칈 pueden generar objetos (instancias).

class Car {
    // Si no se especifican van a ser p칰blicas.
    // static son de forma global, se usan en casos muy espec칤ficos.
    readonly brand: string;
    public doors: number;
    public fuelTank: number;
    public isRunning: boolean;
    public type: string;
    
    private readonly createdAt: number;

    // 游댳 El constructor
    // Es una funci칩n especial dentro de la clase.
    // Se ejecuta autom치ticamente cuando se crea un nuevo objeto (instancia).
    // Aqu칤 se inicializan los valores por defecto de la clase.
    // Solo aqu칤 se pueden editar las propiedades.
    constructor(brand: string, type: string) {
        this.brand = brand; //el = brand es el argumento que pedimos, no tiene que ser igual al this.brand
        this.doors = 0;
        this.fuelTank = 0;
        this.isRunning = false;
        this.type = 'No type';
        this.createdAt = 123456789;
    }

    turnOn() {
        if(this.isRunning) {
            console.log('El carro ya estaba encendido, se da침칩 el motor.');
            return; // Detiene la ejecuci칩n del m칠todo.
        }

        if (this.fuelTank <= 0) {
            console.log('El carro no tiene gasolina.');
            return;
        }

        this.isRunning = true;
        console.log("El carro est치 encendido.");
    }

    /*
        gas: number.
        gas > 100, this.fillTank = 100
        gas tiene positivo.
        si ya est치 lleno, no sobre llenar.
        si el tanque es 50 y a침ado 20, el valor de fillTank ser칤a 70.
        si 
    */
    fillTank (gas: number) {
        let gasActual = this.fuelTank;
        console.log('El estado inicial del tanque es:', gasActual);
        if (gasActual + gas > 100) {
            console.log("La cantidad ingresada es mayor a lo permitido.");
            return;
        }

        if (gas <= 0 || gas > 100) {
            console.log("El valor debe ser una cantidad v치lida.");
            return;
        }

        gas = this.fuelTank + gas;
        console.log('El estado actual del tanque es:', gas);
        return;
    }
}

export let myMazda = new Car('Mazda', 'Sedan'); 
// myMazda.brand = 'Honda'; // ya no se puede cambiar el valor si lo definimos con readonly.
// myMazda.createdAt = 1234 // error porque es readonly y no puedo cambiarlo.
// console.log(myMazda.createdAt)

console.log(myMazda);
myMazda.fillTank(80);